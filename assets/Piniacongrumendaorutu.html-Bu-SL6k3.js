import{_ as s,c as a,a as e,o as p}from"./app-Crz_P5Al.js";const t={};function i(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h3 id="pinia-是什么" tabindex="-1"><a class="header-anchor" href="#pinia-是什么"><span>Pinia 是什么？</span></a></h3><p>Pinia 是一个基于 Vue 3 的状态管理库。与 Vue 2 中的 Vuex 不同，Pinia 使用了 Vue 3 的 Composition API，因此可以更好地支持 TypeScript 和提供更灵活的状态管理方式。</p><h3 id="pinia-的特点" tabindex="-1"><a class="header-anchor" href="#pinia-的特点"><span>Pinia 的特点</span></a></h3><ul><li>简单易用：Pinia 的 API 设计针对 Composition API，方便使用 Vue 3 的新特性。</li><li>支持 TypeScript：提供强类型定义，能够在编译时捕获错误。</li><li>支持插件机制：可以轻松扩展功能。</li><li>支持多个 store 实例：每个 store 实例都可以拥有自己的状态和行为。</li><li>支持持久化存储：可以将 store 中的数据保存在本地存储中，在页面刷新后仍然可以访问。</li></ul><h3 id="使用-pinia" tabindex="-1"><a class="header-anchor" href="#使用-pinia"><span>使用 Pinia</span></a></h3><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">pnpm install pinia</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>在 main.js（或者是 main.ts）文件中，引入 createApp 和 createPinia 函数，并在应用程序中使用 Pinia</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建-pinia-存储" tabindex="-1"><a class="header-anchor" href="#创建-pinia-存储"><span>创建 Pinia 存储</span></a></h4><p>在应用程序中，你需要创建一个 Pinia 存储来管理状态。可以使用 defineStore 函数来定义存储。 在 <code>/stores/counter.js</code> 文件中创建 <code>useCounterStore</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      count<span class="token punctuation">,</span></span>
<span class="line">      increment</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们使用 <code>defineStore</code> 函数定义了名为 <code>counter</code> 的存储。该存储包含一个响应式数据 <code>count</code> 和一个方法 <code>increment</code>，用于增加 <code>count</code> 的值。</p><h4 id="在组件中使用-pinia" tabindex="-1"><a class="header-anchor" href="#在组件中使用-pinia"><span>在组件中使用 Pinia</span></a></h4><p>在组件中使用 <code>Pinia</code> 存储非常简单。首先，在组件的 <code>&lt;script setup&gt;</code> 部分引入 <code>useCounterStore</code> 方法，并获取对应的存储实例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counter&#39;</span></span>
<span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">clickHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Current Count<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> counter<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;clickHandle&quot;</span><span class="token operator">&gt;</span>加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们通过 <code>useCounterStore</code> 方法获取 <code>counter</code> 的存储实例，并将其绑定到组件的 <code>counter</code> 变量上。然后，我们可以直接访问 <code>counter.count</code> 来获取状态值，并通过调用 <code>counter.increment()</code> 来执行方法。</p><h3 id="pinia-持久化" tabindex="-1"><a class="header-anchor" href="#pinia-持久化"><span>Pinia 持久化</span></a></h3><p><code>persist: true</code>开启数据持久化，当我们更新<code>state</code>值时，会默认存储到<code>localStorage</code>中</p>`,20)]))}const l=s(t,[["render",i],["__file","Piniacongrumendaorutu.html.vue"]]),r=JSON.parse('{"path":"/blogs/Pinia/2024/Piniacongrumendaorutu.html","title":"Pinia从入门到入土","lang":"en-US","frontmatter":{"title":"Pinia从入门到入土","date":"2024/6/20","tags":["状态管理"],"categories":["Pinia"]},"headers":[{"level":3,"title":"Pinia 是什么？","slug":"pinia-是什么","link":"#pinia-是什么","children":[]},{"level":3,"title":"Pinia 的特点","slug":"pinia-的特点","link":"#pinia-的特点","children":[]},{"level":3,"title":"使用 Pinia","slug":"使用-pinia","link":"#使用-pinia","children":[]},{"level":3,"title":"Pinia 持久化","slug":"pinia-持久化","link":"#pinia-持久化","children":[]}],"git":{"createdTime":1757911599000,"updatedTime":1757911599000,"contributors":[{"name":"D_quieT","email":"1360577536@qq.com","commits":1}]},"filePathRelative":"blogs/Pinia/2024/Pinia从入门到入土.md"}');export{l as comp,r as data};
