import{_ as a,c as n,a as e,o as t}from"./app-Crz_P5Al.js";const p={};function o(l,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h4 id="一、在项目中新增配置" tabindex="-1"><a class="header-anchor" href="#一、在项目中新增配置"><span>一、在项目中新增配置</span></a></h4><ol><li><p>在 <code>vite.config.js</code> 中设置正确的 <code>base</code>。 如果你要部署在 <code>https://.github.io/</code> 上，你可以省略 <code>base</code> 使其默认为 <code>/</code>。 如果你要部署在 <code>https://.github.io//</code> 上，例如你的仓库地址为 <code>https://github.com//</code>，那么请设置 <code>base</code> 为 <code>‘//’</code>。</p></li><li><p>在项目根路目录下，新建<code>deploy.sh</code>文件</p></li></ol><blockquote><p>文件大致意思就是在build完后的dist目录中，新建仓库，然后将内容推到远程仓库的gh-pages</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    #<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env sh</span>
<span class="line">    </span>
<span class="line">    # 确保脚本抛出遇到的错误</span>
<span class="line">    set <span class="token operator">-</span>e</span>
<span class="line">    </span>
<span class="line">    # 生成静态文件</span>
<span class="line">    yarn run build</span>
<span class="line">    </span>
<span class="line">    # 进入生成的文件夹</span>
<span class="line">    cd <span class="token punctuation">.</span><span class="token operator">/</span>dist</span>
<span class="line">    </span>
<span class="line">    git init</span>
<span class="line">    git add <span class="token operator">-</span><span class="token constant">A</span></span>
<span class="line">    git commit <span class="token operator">-</span>m <span class="token string">&#39;message&#39;</span></span>
<span class="line"></span>
<span class="line">    # 如果发布到 https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token constant">USERNAME</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>github<span class="token punctuation">.</span>io</span>
<span class="line">    # git push <span class="token operator">-</span>f git@github<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token constant">USERNAME</span><span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token constant">USERNAME</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git master</span>
<span class="line"></span>
<span class="line">    # 如果发布到 https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token constant">USERNAME</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token constant">REPO</span><span class="token operator">&gt;</span></span>
<span class="line">    # git push <span class="token operator">-</span>f git@github<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token constant">USERNAME</span><span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token constant">REPO</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>git master<span class="token operator">:</span>gh<span class="token operator">-</span>pages</span>
<span class="line">    </span>
<span class="line">    cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span> <span class="token operator">&amp;&amp;</span> rm <span class="token operator">-</span>rf dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在本地项目根路径下运行以下命令，等命令结束后，就完成了<code>github page</code>的部署,<code>windows</code>需要借助<code>Git Bash</code>来执行</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">        bash deploy<span class="token punctuation">.</span>sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>总体来说，github page的部署还是很简单的。主要是将build后的dist放到一个新的分支上，然后github page就和nginx一样，就会自动托管你的静态文件。</p></blockquote>`,7)]))}const c=a(p,[["render",o],["__file","GitHubPage.html.vue"]]),r=JSON.parse('{"path":"/blogs/Github/2025/GitHubPage.html","title":"将项目部署到Github上","lang":"en-US","frontmatter":{"title":"将项目部署到Github上","date":"2025/1/20","tags":["GithubPage"],"categories":["Github"]},"headers":[],"git":{"createdTime":1757911599000,"updatedTime":1757911599000,"contributors":[{"name":"D_quieT","email":"1360577536@qq.com","commits":1}]},"filePathRelative":"blogs/Github/2025/GitHubPage.md"}');export{c as comp,r as data};
